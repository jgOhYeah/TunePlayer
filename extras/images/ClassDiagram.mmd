%% mmdc -i ClassDiagram.mmd -o ClassDiagram.svg
classDiagram
    BaseTuneLoader <|-- FlashTuneLoader
    BaseTuneLoader <|-- EEPROMTuneLoader
    SoundGenerator <|-- ToneSound
    SoundGenerator <|-- TimerOneSound
    TunePlayer "1" --> "1" BaseTuneLoader
    TunePlayer "1" --> "1" SoundGenerator
    TunePlayer "1" --> "1" cppQueue
    TunePlayer "1" *.. "0..*" NoteData
    TunePlayer "1" *.. "0..*" RepeatData

    class BaseTuneLoader {
        <<abstract>>
        +loadNote(uint16_t address)* uint16_t
    }

    class FlashTuneLoader {
        +setTune(uint16_t *tune)
        +loadNote(uint16_t address) uint16_t
    }

    class EEPROMTuneLoader {
        +setStart(uint16_t start)
        +loadNote(uint16_t address) uint16_t
    }

    class SoundGenerator {
        <<absract>>
        +begin()
        +playNote(uint8_t note, uint8_t octave, uint32_t playTime=0)
        +stopSound()
        +playMidiNote(uint8_t midiNote)
    }

    class ToneSound {
        +ToneSound(uint8_t pin)
        +playNote(uint8_t note, uint8_t octave, uint32_t playTime=0)
        +stopSound()
        -m_frequency(uint8_t note, uint8_t octave) uint16_t
        -m_pin
    }

    class TimerOneSound {
        +playNote(uint8_t note, uint8_t octave, uint32_t playTime=0)
        +playMidiNote(uint8_t note)
        +stopSound()
        -m_counterTop(uint8_t note, uint8_t octave) uint16_t
        -m_compareValue(uint16_t counter) uint16_t
    }

    class TunePlayer {
        +BaseTuneLoader tuneLoader
        +SoundGenerator soundGenerator
        -Queue~NoteData~ m_notesQueue
        -Queue~RepeatData~ m_repeatsStack
        -uint16_t m_noteAddress
        -uint32_t m_timebase
        -uint32_t m_nextNoteTime
        -uint32_t m_curNoteStart
        -uint32_t m_curNoteStop
        -bool m_isPlaying
        +TunePlayer()
        +begin(BaseTuneLoader *newTuneSource, SoundGenerator *newSoundGenerator)
        +begin()
        +spool()
        +play()
        +pause()
        +stop()
        +update()
        +updateLowPriority()
        +updateHighPriority()
        +isPlaying() bool
        -m_makeNoise()
        -m_executeRepeat(uint16_t rawNote)
    }

    class NoteData {
        <<private>>
        +uint8_t note
        +uint8_t octave
        +uint32_t playTime
        +uint32_t nextTime
    }

    class RepeatData {
        <<private>>
        +uint16_t index
        +uint8_t count
    }